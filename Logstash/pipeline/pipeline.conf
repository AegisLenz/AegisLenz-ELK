input {
    beats {
        port => 5045
        codec => json {
            charset => "UTF-8"
            target => "parsed_message"
        }
    }
}

filter {
    # parsed_message와 Records 필드가 있는 경우에만 처리
    if [parsed_message] and [parsed_message][Records] {
        # Records 배열을 개별 이벤트로 나눔
        split {
            field => "[parsed_message][Records]"
        }

        # 필드를 원래 이름으로 유지하여 매핑
        mutate {
            rename => {
                "[parsed_message][Records][sourceIPAddress]" => "sourceIPAddress"
                "[parsed_message][Records][userAgent]" => "userAgent"
                "[parsed_message][Records][eventName]" => "eventName"
                "[parsed_message][Records][eventType]" => "eventType"
                "[parsed_message][Records][eventSource]" => "eventSource"
                "[parsed_message][Records][awsRegion]" => "awsRegion"
                "[parsed_message][Records][errorCode]" => "errorCode"
                "[parsed_message][Records][errorMessage]" => "errorMessage"
                "[parsed_message][Records][managementEvent]" => "managementEvent"
                "[parsed_message][Records][vpcEndpointId]" => "vpcEndpointId"
                "[parsed_message][Records][eventTime]" => "eventTime"
            }
        }

        # event_time을 @timestamp로 변환
        date {
            match => ["eventTime", "ISO8601"]
            target => "@timestamp"
        }

        # 불필요한 필드 삭제
        mutate {
            remove_field => ["parsed_message", "host", "agent"]
        }
    } else {
        drop { }
    }
}

output {
    elasticsearch {
        hosts => ["${ELASTIC_HOST}"]
        index => "cloudtrail-logs-%{+YYYY.MM.dd}"
        ssl_verification_mode => "none"
        ecs_compatibility => "v8"
    }
}
