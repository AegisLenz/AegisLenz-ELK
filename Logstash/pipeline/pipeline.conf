input {
    beats {
        port => 5045
        codec => json {
            charset => "UTF-8"
            target => "parsed_message"
        }
    }
}

filter {
    # parsed_message가 있고 Records가 있는지 확인합니다.
    if [parsed_message] and [parsed_message][Records] {
        # Records 배열을 개별 이벤트로 분리합니다.
        split {
            field => "[parsed_message][Records]"
        }

        # 필요한 필드를 rename하여 JSON 필드로 변환합니다.
        mutate {
            rename => {
                "[parsed_message][Records][sourceIPAddress]" => "sourceIPAddress"
                "[parsed_message][Records][userAgent]" => "userAgent"
                "[parsed_message][Records][eventName]" => "eventName"
                "[parsed_message][Records][eventType]" => "eventType"
                "[parsed_message][Records][eventSource]" => "eventSource"
                "[parsed_message][Records][awsRegion]" => "awsRegion"
                "[parsed_message][Records][errorCode]" => "errorCode"
                "[parsed_message][Records][errorMessage]" => "errorMessage"
                "[parsed_message][Records][managementEvent]" => "managementEvent"
                "[parsed_message][Records][vpcEndpointId]" => "vpcEndpointId"
                "[parsed_message][Records][eventTime]" => "eventTime"
                "[parsed_message][Records][userIdentity][type]" => "userIdentityType"
                "[parsed_message][Records][userIdentity][principalId]" => "userIdentityPrincipalId"
                "[parsed_message][Records][userIdentity][arn]" => "userIdentityArn"
                "[parsed_message][Records][userIdentity][accountId]" => "userIdentityAccountId"
                "[parsed_message][Records][userIdentity][accessKeyId]" => "userIdentityAccessKeyId"
                "[parsed_message][Records][sessionContext][attributes][creationDate]" => "sessionCreationDate"
                "[parsed_message][Records][sessionContext][attributes][mfaAuthenticated]" => "mfaAuthenticated"
            }
        }

        # JSON 파싱하여 추가 이벤트 데이터 처리
        json {
            source => "[event][original]"
            target => "event_data"
        }

        # 타임스탬프 변환
        date {
            match => ["eventTime", "ISO8601"]
            target => "@timestamp"
        }

        # 불필요한 필드 제거
        mutate {
            remove_field => ["parsed_message", "host", "agent", "event.original"]
        }
    } else {
        drop { }
    }
}

output {
    elasticsearch {
        hosts => ["${ELASTIC_HOST}"]
        index => "cloudtrail-logs-%{+YYYY.MM.dd}"
        ssl_verification_mode => "none"
        ecs_compatibility => "v8"
    }
}
