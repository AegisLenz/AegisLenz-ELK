input {
    beats {
        port => 5045
        codec => json {
            charset => "UTF-8"
            target => "parsed_message"
        }
    }
}

filter {
    # Records 배열 처리
    if [parsed_message] and [parsed_message][Records] {
        # Records 배열을 개별 이벤트로 분리
        split {
            field => "[parsed_message][Records]"
        }

        # JSON 구조를 간결하게 변환
        mutate {
            rename => { "[parsed_message][Records]" => "record" }
        }

        if ![record][sourceIPAddress] {
            drop { }
        }

        # 각 이벤트의 키-값 포맷팅 (formatted_output 생성)
        ruby {
            code => '
                formatted_fields = []
                event.get("record").each do |k, v|
                    if v.is_a?(Hash) || v.is_a?(Array)
                        formatted_fields << "#{k}: #{JSON.pretty_generate(v)}"
                    else
                        formatted_fields << "#{k}: #{v}"
                    end
                end
                event.set("formatted_output", formatted_fields.join("\n"))
            '
        }

        # Throttle 필터로 데이터 처리 속도 제한
        throttle {
            after_count => 5        # 한 번에 처리할 이벤트 수
            period => 1            # 1초 동안 최대 5개의 이벤트만 처리
            key => "%{sourceIPAddress}"  # 속도를 제한할 기준 필드 (예: sourceIPAddress별 제한)
            add_tag => ["throttled"]  # 속도 제한이 걸린 이벤트에 추가 태그
        }

        # JSON 정렬 (추가적인 가독성 개선)
        ruby {
            code => '
                event.to_hash.each do |key, value|
                    if value.is_a?(Hash) || value.is_a?(Array)
                        event.set(key, JSON.pretty_generate(value))
                    end
                end
            '
        }

        # 불필요한 필드 제거
        mutate {
            remove_field => ["parsed_message", "host", "agent", "event.original"]
        }
    } else {
        # Records가 없으면 이벤트 드롭
        drop { }
    }
}

output {
    elasticsearch {
        hosts => ["${ELASTIC_HOST}"]
        index => "cloudtrail-logs-%{+YYYY.MM.dd}"
        ssl_verification_mode => "none"
        ecs_compatibility => "v8"
        document_id => "%{[record][eventID]}"
        template_overwrite => true
    }

    # 디버깅용 콘솔 출력 (formatted_output 활용)
    stdout {
        codec => line { format => "%{formatted_output}" }
    }
}
